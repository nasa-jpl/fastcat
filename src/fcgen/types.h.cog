[[[cog
import yaml
import re

def snake2camel(str):
  return ''.join(x.capitalize() or '_' for x in str.split('_'))

data = yaml.load(open(cog_yaml_file, 'r'), Loader=yaml.Loader)

cog.outl('// This file is autogenerated from: %s' % cog_yaml_file)
cog.outl('// using the python cog tool.  Do not modify this file manually.')
cog.outl('// Please make modifications to fcgen/types.h.cog')

]]]
[[[end]]]

#ifndef FASTCAT_TYPES_H_
#define FASTCAT_TYPES_H_


#include <string>

#include "jsd/jsd_types.h"

namespace fastcat {



//////////////////////////////////
// Device Commands
//////////////////////////////////
[[[cog
for cmd in data['commands']:
  cog.outl('typedef struct {')
  for field in cmd['fields']:
    cog.outl('%s %s;' % (field['type'], field['name']))
  camel = snake2camel(cmd['name'])
  cog.outl('} %sCmd;' % camel)
  cog.outl('')

]]]
[[[end]]]



//////////////////////////////////
// Fastcat Commands
//////////////////////////////////
enum DeviceCmdType {
[[[cog
for cmd in data['commands']:
  cog.outl('%s_CMD,' %cmd['name'].upper())
]]]
[[[end]]]
  BAD_DEVICE_CMD
};


typedef struct {
  std::string name;
  DeviceCmdType type;
  union {
[[[cog
for cmd in data['commands']:
  camel = snake2camel(cmd['name'])
  cog.outl('%sCmd %s_cmd;' % (camel, cmd['name']) )
]]]
[[[end]]]

  };
} DeviceCmd;




//////////////////////////////////
// Device States
//////////////////////////////////
[[[cog
for state in data['states']:
  cog.outl('typedef struct {')
  for field in state['fields']:
    cog.outl('%s %s;' % (field['type'], field['name']))
  camel = snake2camel(state['name'])
  cog.outl('} %sState;' % camel)
  cog.outl('')

]]]
[[[end]]]


//////////////////////////////////
// Fastcat States
//////////////////////////////////
enum DeviceStateType {
[[[cog
for state in data['states']:
  cog.outl('%s_STATE,' % state['name'].upper())
]]]
[[[end]]]
  BAD_DEVICE_STATE
};


typedef struct {
  std::string name;
  DeviceStateType type;
  union {
[[[cog
for state in data['states']:
  camel = snake2camel(state['name'])
  cog.outl('%sState %s_state;' % (camel, state['name']) )
]]]
[[[end]]]

  };
  double time;
  double monotonic_time;
} DeviceState;


//////////////////////////////////
// Signal
//////////////////////////////////

typedef enum {
  DATA_TYPE_UNINITIALIZED,
  DATA_TYPE_BOOL,
  DATA_TYPE_INT8,
  DATA_TYPE_UINT8,
  DATA_TYPE_INT16,
  DATA_TYPE_UINT16,
  DATA_TYPE_INT32,
  DATA_TYPE_UINT32,
  DATA_TYPE_DOUBLE,
} data_type_t;

typedef struct {
  // Yaml input fields

  std::string observed_device_name;
  std::string request_signal_name;
  std::string cmd_field_name;

  // for data fetching and casting
  data_type_t data_type = DATA_TYPE_UNINITIALIZED;
  void *data_loc = nullptr;
  double value;

} Signal;

//////////////////////////////////
// Fault
//////////////////////////////////

enum FaultType {
  NO_FAULT,
  WARNING,
  ALL_DEVICE_FAULT
};

//////////////////////////////////
// Actuator Position Data
//////////////////////////////////

typedef struct{
  double position = 0.0;
} ActuatorPosData;


typedef struct{
  jsd_sdo_req_t response;
  std::string   device_name;
} SdoResponse;

} // fastcat namespace

#endif
