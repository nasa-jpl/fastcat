#ifndef FASTCAT_ENUM_CONVERSIONS_H_
#define FASTCAT_ENUM_CONVERSIONS_H_

[[[cog
import yaml
import re

def snake2camel(str):
  return ''.join(x.capitalize() or '_' for x in str.split('_'))

cmd_data     = yaml.load(open(command_yaml, 'r'), Loader=yaml.Loader)
device_data  = yaml.load(open(device_yaml, 'r'), Loader=yaml.Loader)
enum_data    = yaml.load(open(enum_yaml, 'r'), Loader=yaml.Loader)
manager_data = yaml.load(open(manager_yaml, 'r'), Loader=yaml.Loader)

cog.outl('// This file is autogenerated from: %s' % cog_yaml_file)
cog.outl('// using the python cog tool.  Do not modify this file manually.')
]]]
[[[end]]]


#include "fastcat/types.h"
#include "jsd/jsd_print.h"

namespace fastcat {

[[[cog
for this_enum in enum_data['enumerations']:
 cog.outl('%s %sFromString(const std::string& s){' % (
    snake2camel(this_enum['name']),
    snake2camel(this_enum['name'])))
 cog.outl('%s e = BAD_%s;' % (
   snake2camel(this_enum['name']), 
   this_enum['name'].upper() 
   ))   
 
 first_entry = True
 for entry in this_enum['entries']:
   if 'string' in entry.keys():
     compare_str = entry['string']
   else:
     compare_str = entry['value']
 
   if first_entry:
     cog.outl('if (s.compare("%s") == 0) {' % (compare_str))
     first_entry = False
   else:
     cog.outl('} else if (s.compare("%s") == 0) {' % (compare_str))

   cog.outl('e = %s;' % entry['value'])

 cog.outl('} else {')
 cog.outl('ERROR("%s is not valid value for %s", s.c_str());' % ("%s", snake2camel(this_enum['name'])))

 cog.outl('}')
 cog.outl('')
 cog.outl('return e;')

 cog.outl('};')
 cog.outl('')
]]]
[[[end]]]

}; // namespace fastcat

#endif
