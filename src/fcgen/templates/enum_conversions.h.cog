#ifndef FASTCAT_ENUM_CONVERSIONS_H_
#define FASTCAT_ENUM_CONVERSIONS_H_

[[[cog
import yaml
import re

def snake2camel(str):
  return ''.join(x.capitalize() or '_' for x in str.split('_'))

cmd_data     = yaml.load(open(command_yaml, 'r'), Loader=yaml.Loader)
device_data  = yaml.load(open(device_yaml, 'r'), Loader=yaml.Loader)
enum_data    = yaml.load(open(enum_yaml, 'r'), Loader=yaml.Loader)
manager_data = yaml.load(open(manager_yaml, 'r'), Loader=yaml.Loader)

cog.outl('// This file is autogenerated from: %s' % cog_yaml_file)
cog.outl('// using the python cog tool.  Do not modify this file manually.')

def createEnum(name, values, string_values=[], is_jsd_enum_alias=False):
 cog.outl('%s %sFromString(const std::string& s){' % (
    snake2camel(name),
    snake2camel(name)))
 cog.outl('  %s e = BAD_%s;' % (
   snake2camel(name), 
   name.upper() 
   ))   

 first_entry = True
 for (value, string_value) in zip(values, string_values):
   if first_entry:
     first_entry = False
     cog.outl('  if (s.compare("%s") == 0) {' % string_value)
   else:
     cog.outl('  } else if (s.compare("%s") == 0) {' % string_value)

   cog.outl('    e = %s;' % value)

 cog.outl('  } else {')
 cog.outl('    ERROR("%s is not valid value for %s", s.c_str());' % ("%s", name))

 cog.outl('  }')
 cog.outl('')
 cog.outl('  return e;')

 cog.outl('};')
 cog.outl('')
]]]
[[[end]]]


#include "fastcat/types.h"
#include "jsd/jsd_print.h"

namespace fastcat {


//////////////////////
// Device Types
//////////////////////
[[[cog
entries = []
for devices in device_data['devices']:
  entries.append(devices['name'].upper() + "_DEVICE")
createEnum("device_type", entries, entries)
]]]
[[[end]]]

//////////////////////
// Device Commands
//////////////////////
[[[cog
entries = []
for cmds in cmd_data['commands']:
  entries.append(cmds['name'].upper() + "_CMD")
createEnum("device_cmd_type", entries, entries)
]]]
[[[end]]]

//////////////////////
// YAML-defined enums 
//////////////////////

[[[cog
for this_enum in enum_data['enumerations']:
  entries = [] 
  string_entries = []
  jsd_enum_alias = False
  if 'jsd_enum_alias' in this_enum:
    jsd_enum_alias = bool(this_enum['jsd_enum_alias'])
    
  for entry in this_enum['entries']:
    entries.append(entry['value'])
    if 'string' in entry.keys():
      string_entries.append(entry['string'])
    else:
      string_entries.append(entry['value'])

  createEnum(this_enum['name'], entries, string_entries, jsd_enum_alias)
]]]
[[[end]]]

}; // namespace fastcat

#endif
